{"version":3,"sources":["global-styles.ts","context/grid.context.tsx","context/rovers.context.tsx","providers.tsx","components/gridNode/styles.ts","components/gridNode/index.tsx","sections/GridSection/styles.ts","sections/GridSection/index.tsx","components/button/styles.ts","components/button/index.tsx","components/TextInput/styles.ts","components/TextInput/index.tsx","sections/InputSection/styles.ts","components/typography/styles.ts","components/typography/index.tsx","components/TextArea/styles.ts","components/TextArea/index.tsx","components/roverItem/styles.ts","components/roverItem/index.tsx","sections/InputSection/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","styled","div","StyledContainer","StyledFlexContainer","DEFAULT_GRID_CONTEXT_DATA","x","y","setX","setY","generateGrid","gridArray","grid","GridContext","createContext","Provider","GridProvider","children","useState","setGrid","setGridArray","Array","parseInt","position","gridColumns","i","row","j","toString","useEffect","value","useGrid","context","useContext","Error","DEFAULT_ROVER_CONTEXT_DATA","rovers","roverX","roverY","roverCount","currentRover","commands","lookDirection","setRovers","setRoverCount","setCurrentRover","setRoverX","setRoverY","setCommands","setLookDirection","createRover","sendAllRovers","sendOneRover","roverColor","setRoverColor","RoverContext","RoverProvider","rover","p","status","forEach","command","current","initial","split","color","push","length","index","useRovers","Providers","StyledGridNodeContainer","hasRover","StyledGridNodeTooltip","show","GridNode","gridNode","hover","setHover","filter","onMouseEnter","onMouseLeave","StyledGridSection","section","StyledGridRow","GridSection","props","map","gridColumn","StyledButton","button","Button","label","onClick","disabled","TextInputContainer","StyledInput","input","InputLabel","TextInput","changeValue","onChange","e","target","StyledInputSection","StyledGridInputRow","commonCSS","css","StyledH1","h1","StyledH2","h2","StyledH3","h3","StyledH4","h4","StyledH5","h5","StyledH6","h6","StyledP","Typography","type","text","TextAreaContainer","StyledTextArea","textarea","TextAreaLabel","TextArea","StyledRoverItemContainer","StyledRoverPositionContainer","RoverItem","join","InputSection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f509f31.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const App = styled.div`\r\n  background-color: #282c34;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: row;\r\n  font-size: calc(10px + 1vmin);\r\n  color: white;\r\n`;\r\n\r\nexport const StyledContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 0.2em;\r\n  margin: 0.2em;\r\n  border: 2px solid gray;\r\n`;\r\nexport const StyledFlexContainer = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n`;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { createContext } from \"react\";\r\n\r\nexport interface GridNode {\r\n  x: string;\r\n  y: string;\r\n  position: string;\r\n}\r\n\r\ninterface GridContextData {\r\n  x: string;\r\n  y: string;\r\n  setX: (x: string) => void;\r\n  setY: (y: string) => void;\r\n  generateGrid: () => void;\r\n  gridArray: GridNode[];\r\n  grid: [GridNode[]];\r\n}\r\nconst DEFAULT_GRID_CONTEXT_DATA: GridContextData = {\r\n  x: \"0\",\r\n  y: \"0\",\r\n  setX: () => null,\r\n  setY: () => null,\r\n  generateGrid: () => null,\r\n  gridArray: [],\r\n  grid: [[]],\r\n};\r\nconst GridContext = createContext<GridContextData>(DEFAULT_GRID_CONTEXT_DATA);\r\n\r\nconst { Provider } = GridContext;\r\n\r\nexport const GridProvider: React.FC = ({ children }) => {\r\n  const [x, setX] = useState(\"5\");\r\n  const [y, setY] = useState(\"5\");\r\n  const [grid, setGrid] = useState<[GridNode[]]>([[]]);\r\n  const [gridArray, setGridArray] = useState<GridNode[]>([]);\r\n\r\n  const generateGrid = () => {\r\n    const gridArray = new Array(parseInt(x) * parseInt(y));\r\n    let position = 0;\r\n    var gridColumns: [GridNode[]] = [[]];\r\n    for (var i = 0; i < parseInt(y); i++) {\r\n      let row: GridNode[] = new Array(parseInt(x));\r\n      for (var j = 0; j < parseInt(x); j++) {\r\n        row[j] = {\r\n          x: (j + 1).toString(),\r\n          y: (i + 1).toString(),\r\n          position: position.toString(),\r\n        };\r\n        position++;\r\n      }\r\n      gridColumns[i] = row;\r\n    }\r\n    setGridArray(gridArray);\r\n    setGrid(gridColumns);\r\n  };\r\n\r\n  useEffect(() => {\r\n    generateGrid();\r\n  }, []);\r\n  return (\r\n    <Provider value={{ x, y, setX, setY, generateGrid, grid, gridArray }}>\r\n      {children}\r\n    </Provider>\r\n  );\r\n};\r\n\r\nconst useGrid = (): GridContextData => {\r\n  const context = useContext(GridContext);\r\n\r\n  if (!context) throw new Error(\"useGrid must be used within <GridProvider>\");\r\n  return context;\r\n};\r\n\r\nexport default useGrid;\r\n","import React, { createContext, useContext, useState } from \"react\";\r\n// import useGrid from \"./grid.context\";\r\n\r\nexport interface Rover {\r\n  initial: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n  current: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n  lookDirection: \"N\" | \"E\" | \"S\" | \"W\" | string;\r\n  commands: string[];\r\n  status: \"waiting\" | \"running\" | \"done\";\r\n  color: string;\r\n}\r\n\r\ninterface RoverContextData {\r\n  roverX: string;\r\n  roverY: string;\r\n  rovers: Rover[];\r\n  roverCount: number;\r\n  currentRover: Rover | null;\r\n  setRovers: (r: Rover[]) => void;\r\n  setRoverCount: (n: number) => void;\r\n  setCurrentRover: (r: Rover | null) => void;\r\n  setRoverX: (x: string) => void;\r\n  setRoverY: (y: string) => void;\r\n  setCommands: (c: string) => void;\r\n  setLookDirection: (ld: \"N\" | \"E\" | \"S\" | \"W\" | string) => void;\r\n  createRover: () => void;\r\n  sendAllRovers: () => void;\r\n  sendOneRover: (r: Rover, p: number) => void;\r\n  commands: string;\r\n  lookDirection: \"N\" | \"E\" | \"S\" | \"W\" | string;\r\n  roverColor: string;\r\n  setRoverColor: (c: string) => void;\r\n}\r\n\r\nconst DEFAULT_ROVER_CONTEXT_DATA: RoverContextData = {\r\n  rovers: [],\r\n  roverX: \"0\",\r\n  roverY: \"0\",\r\n  roverCount: 0,\r\n  currentRover: null,\r\n  commands: \"\",\r\n  lookDirection: \"N\",\r\n  setRovers: () => null,\r\n  setRoverCount: () => null,\r\n  setCurrentRover: () => null,\r\n  setRoverX: () => null,\r\n  setRoverY: () => null,\r\n  setCommands: () => null,\r\n  setLookDirection: () => null,\r\n  createRover: () => null,\r\n  sendAllRovers: () => null,\r\n  sendOneRover: () => null,\r\n  roverColor: \"\",\r\n  setRoverColor: () => null,\r\n};\r\n\r\nconst RoverContext = createContext<RoverContextData>(\r\n  DEFAULT_ROVER_CONTEXT_DATA\r\n);\r\nconst { Provider } = RoverContext;\r\n\r\nexport const RoverProvider: React.FC = ({ children }) => {\r\n  // const { x, y } = useGrid();\r\n  const [currentRover, setCurrentRover] = useState<Rover | null>(null);\r\n\r\n  const [rovers, setRovers] = useState<Rover[]>([]);\r\n  const [roverCount, setRoverCount] = useState(0);\r\n\r\n  const [roverX, setRoverX] = useState(\"1\");\r\n  const [roverY, setRoverY] = useState(\"2\");\r\n  const [commands, setCommands] = useState(\"LMLMLMLMM\");\r\n  const [roverColor, setRoverColor] = useState(\"\");\r\n  const [lookDirection, setLookDirection] = useState<\r\n    \"N\" | \"E\" | \"S\" | \"W\" | string\r\n  >(\"N\");\r\n\r\n  const createRover = () => {\r\n    let rover: Rover = {\r\n      initial: {\r\n        x: parseInt(roverX),\r\n        y: parseInt(roverY),\r\n      },\r\n      current: {\r\n        x: parseInt(roverX),\r\n        y: parseInt(roverY),\r\n      },\r\n      commands: commands.split(\"\"),\r\n      lookDirection,\r\n      status: \"waiting\",\r\n      color: \"red\",\r\n    };\r\n    rovers.push(rover);\r\n    setRoverX(\"0\");\r\n    setRoverY(\"0\");\r\n    setCommands(\"\");\r\n    setLookDirection(\"N\");\r\n    setRoverCount(rovers.length);\r\n  };\r\n\r\n  const sendAllRovers = () => {\r\n    rovers.forEach((rover, index) => {\r\n      setCurrentRover(rover);\r\n      sendOneRover(rover, index);\r\n    });\r\n  };\r\n\r\n  const sendOneRover = (rover: Rover, p: number) => {\r\n    rover.status = \"running\";\r\n    rover.commands.forEach((command) => {\r\n      switch (command) {\r\n        case \"M\":\r\n          switch (rover.lookDirection) {\r\n            case \"N\":\r\n              // if (rover.current.y === parseInt(y)) {\r\n              //   break;\r\n              // }\r\n              rover.current.y++;\r\n              break;\r\n            case \"E\":\r\n              // if (rover.current.x === parseInt(x)) {\r\n              //   break;\r\n              // }\r\n              rover.current.x++;\r\n              break;\r\n            case \"S\":\r\n              // if (rover.current.y === parseInt(\"1\")) {\r\n              //   break;\r\n              // }\r\n              rover.current.y--;\r\n              break;\r\n            case \"W\":\r\n              // if (rover.current.x === parseInt(\"1\")) {\r\n              //   break;\r\n              // }\r\n              rover.current.x--;\r\n              break;\r\n          }\r\n          break;\r\n        case \"L\":\r\n          switch (rover.lookDirection) {\r\n            case \"N\":\r\n              rover.lookDirection = \"W\";\r\n              break;\r\n            case \"E\":\r\n              rover.lookDirection = \"N\";\r\n              break;\r\n            case \"S\":\r\n              rover.lookDirection = \"E\";\r\n              break;\r\n            case \"W\":\r\n              rover.lookDirection = \"S\";\r\n              break;\r\n          }\r\n          break;\r\n        case \"R\":\r\n          switch (rover.lookDirection) {\r\n            case \"N\":\r\n              rover.lookDirection = \"E\";\r\n              break;\r\n            case \"E\":\r\n              rover.lookDirection = \"S\";\r\n              break;\r\n            case \"S\":\r\n              rover.lookDirection = \"W\";\r\n              break;\r\n            case \"W\":\r\n              rover.lookDirection = \"N\";\r\n              break;\r\n          }\r\n          break;\r\n      }\r\n    });\r\n    rover.status = \"done\";\r\n  };\r\n\r\n  return (\r\n    <Provider\r\n      value={{\r\n        createRover,\r\n        currentRover,\r\n        roverCount,\r\n        rovers,\r\n        roverX,\r\n        roverY,\r\n        setCurrentRover,\r\n        setRoverCount,\r\n        setRovers,\r\n        setRoverX,\r\n        setRoverY,\r\n        commands,\r\n        lookDirection,\r\n        setCommands,\r\n        setLookDirection,\r\n        sendAllRovers,\r\n        sendOneRover,\r\n        roverColor,\r\n        setRoverColor,\r\n      }}\r\n    >\r\n      {children}\r\n    </Provider>\r\n  );\r\n};\r\n\r\nconst useRovers = (): RoverContextData => {\r\n  const context = useContext(RoverContext);\r\n  if (!context)\r\n    throw new Error(\"useRovers can only be used within <RoverProvider>\");\r\n  return context;\r\n};\r\n\r\nexport default useRovers;\r\n","import React from \"react\";\r\nimport { GridProvider } from \"./context/grid.context\";\r\nimport { RoverProvider } from \"./context/rovers.context\";\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  return (\r\n    <GridProvider>\r\n      <RoverProvider>{children}</RoverProvider>\r\n    </GridProvider>\r\n  );\r\n};\r\n\r\nexport default Providers;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledGridNodeContainer = styled.div<{\r\n  hasRover: boolean;\r\n}>`\r\n  border: 1px solid lightgray;\r\n  position: relative;\r\n  margin: 1em;\r\n  padding: 5px;\r\n  border-radius: 5px;\r\n  background-color: ${({ hasRover }) => (hasRover ? \"red\" : \"transparent\")};\r\n  transition: ease 100ms;\r\n  :hover {\r\n    padding: 3px;\r\n    border: 3px solid lightblue;\r\n    cursor: crosshair;\r\n  }\r\n`;\r\nexport const StyledGridNodeTooltip = styled.div<{ show: boolean }>`\r\n  position: absolute;\r\n  background-color: gray;\r\n  left: 10;\r\n  top: 10;\r\n  opacity: ${({ show }) => (show ? 0.8 : 0)};\r\n  border-radius: 4px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  pointer-events: none;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { GridNode as GridNodeData } from \"../../context/grid.context\";\r\nimport useRovers from \"../../context/rovers.context\";\r\nimport * as S from \"./styles\";\r\n\r\ninterface GridNodeProps {\r\n  gridNode: GridNodeData;\r\n}\r\n\r\nconst GridNode: React.FC<GridNodeProps> = ({\r\n  gridNode: { x, y, position },\r\n}) => {\r\n  const { rovers } = useRovers();\r\n  const checkIfHasRover = () => {\r\n    const rover = rovers.filter((rover) => {\r\n      return rover.current.x === parseInt(x) && rover.current.y === parseInt(y);\r\n    });\r\n    return !!rover.length;\r\n  };\r\n  const [hover, setHover] = useState(false);\r\n  return (\r\n    <S.StyledGridNodeContainer\r\n      hasRover={checkIfHasRover()}\r\n      onMouseEnter={() => setHover(true)}\r\n      onMouseLeave={() => setHover(false)}\r\n    >\r\n      <S.StyledGridNodeTooltip show={hover}>\r\n        [{position}] <br /> ({x},{y})\r\n      </S.StyledGridNodeTooltip>\r\n    </S.StyledGridNodeContainer>\r\n  );\r\n};\r\n\r\nexport default GridNode;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledGridSection = styled.section`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column-reverse;\r\n  border: 2px solid gray;\r\n  background-color: #282c34;\r\n  justify-content: center;\r\n  align-items: center;\r\n  overflow: hidden;\r\n`;\r\nexport const StyledGridRow = styled.section`\r\n  display: flex;\r\n  width: auto;\r\n`;\r\nexport const StyledGridColumn = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: auto;\r\n`;\r\n","import React from \"react\";\r\nimport StyledGridNode from \"../../components/gridNode\";\r\nimport useGrid from \"../../context/grid.context\";\r\nimport * as S from \"./styles\";\r\ninterface Props {}\r\n\r\nconst GridSection = (props: Props) => {\r\n  const { grid } = useGrid();\r\n  return (\r\n    <S.StyledGridSection>\r\n      {grid.map((gridColumn, index) => {\r\n        return (\r\n          <S.StyledGridRow key={index}>\r\n            {gridColumn.map((gridNode) => (\r\n              <StyledGridNode key={gridNode.position} gridNode={gridNode} />\r\n            ))}\r\n          </S.StyledGridRow>\r\n        );\r\n      })}\r\n    </S.StyledGridSection>\r\n  );\r\n};\r\n\r\nexport default GridSection;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledButton = styled.button`\r\n  padding: 1em;\r\n  margin: 0em 2em 0em 2em;\r\n  background-color: #282c34;\r\n  border: 2px solid white;\r\n  color: white;\r\n  font-weight: bold;\r\n  transition: 100ms ease;\r\n  cursor: pointer;\r\n  :hover:active {\r\n    background-color: white;\r\n    color: #282c34;\r\n    cursor: pointer;\r\n  }\r\n  :disabled {\r\n    background-color: gray;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport * as S from \"./styles\";\r\ninterface ButtonProps {\r\n  label: string;\r\n  onClick?: () => void;\r\n  disabled?: boolean;\r\n}\r\n\r\nconst Button = ({ label, onClick, disabled }: ButtonProps) => {\r\n  return (\r\n    <S.StyledButton disabled={disabled} onClick={onClick}>\r\n      {label}\r\n    </S.StyledButton>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import styled from \"styled-components\";\r\n\r\nexport const TextInputContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-grow: initial;\r\n  flex-basis: 25%;\r\n  flex-direction: column;\r\n  margin: 1em;\r\n`;\r\nexport const StyledInput = styled.input`\r\n  letter-spacing: 1em;\r\n  font-size: 1em;\r\n  padding: 0.5em;\r\n`;\r\nexport const InputLabel = styled.label`\r\n  color: white;\r\n  font-size: 1em;\r\n  padding: 0.5em;\r\n`;\r\n","import React from \"react\";\r\nimport * as S from \"./styles\";\r\ninterface TextInputProps {\r\n  label?: string;\r\n  value?: string;\r\n  changeValue?: (e: string) => void;\r\n}\r\n\r\nconst TextInput = ({ label, value, changeValue }: TextInputProps) => {\r\n  return (\r\n    <S.TextInputContainer>\r\n      <S.InputLabel>{label}</S.InputLabel>\r\n      <S.StyledInput\r\n        value={value}\r\n        onChange={(e) => !!changeValue && changeValue(e.target.value)}\r\n      />\r\n    </S.TextInputContainer>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledInputSection = styled.section`\r\n  border: 2px solid gray;\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  background-color: #282c34;\r\n`;\r\n\r\nexport const StyledGridInputRow = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-around;\r\n`;\r\nexport const StyledGridButtonRow = styled.div`\r\n  display: flex;\r\n  background-color: red;\r\n  display: flex;\r\n  flex-direction: row;\r\n`;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst commonCSS = css`\r\n  color: white;\r\n`;\r\n\r\nexport const StyledH1 = styled.h1`\r\n  ${commonCSS}\r\n`;\r\nexport const StyledH2 = styled.h2`\r\n  ${commonCSS}\r\n`;\r\nexport const StyledH3 = styled.h3`\r\n  ${commonCSS}\r\n`;\r\nexport const StyledH4 = styled.h4`\r\n  ${commonCSS}\r\n`;\r\nexport const StyledH5 = styled.h5`\r\n  ${commonCSS}\r\n`;\r\nexport const StyledH6 = styled.h6`\r\n  ${commonCSS}\r\n`;\r\nexport const StyledP = styled.p`\r\n  ${commonCSS}\r\n`;\r\n","import React from \"react\";\r\nimport * as S from \"./styles\";\r\ninterface TypographyTypes {\r\n  h1: any;\r\n  h2: any;\r\n  h3: any;\r\n  h4: any;\r\n  h5: any;\r\n  h6: any;\r\n  p: any;\r\n}\r\ninterface TypographyProps {\r\n  type?: keyof TypographyTypes;\r\n  text: string;\r\n}\r\n\r\nconst Typography: React.FC<TypographyProps> = ({ type = \"p\", text }) => {\r\n  const typographies: TypographyTypes = {\r\n    h1: <S.StyledH1>{text}</S.StyledH1>,\r\n    h2: <S.StyledH2>{text}</S.StyledH2>,\r\n    h3: <S.StyledH3>{text}</S.StyledH3>,\r\n    h4: <S.StyledH4>{text}</S.StyledH4>,\r\n    h5: <S.StyledH5>{text}</S.StyledH5>,\r\n    h6: <S.StyledH6>{text}</S.StyledH6>,\r\n    p: <S.StyledP>{text}</S.StyledP>,\r\n  };\r\n\r\n  return typographies[type];\r\n};\r\n\r\nexport default Typography;\r\n","import styled from \"styled-components\";\r\n\r\nexport const TextAreaContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-grow: initial;\r\n  flex-basis: 25%;\r\n  flex-direction: column;\r\n  margin: 1em;\r\n`;\r\nexport const StyledTextArea = styled.textarea`\r\n  letter-spacing: 1em;\r\n  font-size: 1em;\r\n  padding: 0.5em;\r\n`;\r\nexport const TextAreaLabel = styled.label`\r\n  color: white;\r\n  font-size: 1em;\r\n  padding: 0.5em;\r\n`;\r\n","import React from \"react\";\r\nimport * as S from \"./styles\";\r\ninterface TextInputProps {\r\n  label?: string;\r\n  value?: string;\r\n  changeValue?: (e: string) => void;\r\n}\r\n\r\nconst TextArea = ({ label, value, changeValue }: TextInputProps) => {\r\n  return (\r\n    <S.TextAreaContainer>\r\n      <S.TextAreaLabel>{label}</S.TextAreaLabel>\r\n      <S.StyledTextArea\r\n        value={value}\r\n        onChange={(e) => !!changeValue && changeValue(e.target.value)}\r\n      />\r\n    </S.TextAreaContainer>\r\n  );\r\n};\r\n\r\nexport default TextArea;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledRoverItemContainer = styled.div`\r\n  border: 1px solid lightgray;\r\n  margin: 0.1em;\r\n  padding: 0.1em;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nexport const StyledRoverPositionContainer = styled.div`\r\n  margin: 0.1em;\r\n  padding: 0.1em;\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nexport const StyledRoverPosition = styled.p`\r\n  margin: 0.1em;\r\n  padding: 0.1em;\r\n`;\r\nexport const StyledRoverLookDirection = styled.div`\r\n  border: 1px solid lightgray;\r\n  margin: 0.1em;\r\n  padding: 0.1em;\r\n`;\r\n","import React from \"react\";\r\nimport { Rover } from \"../../context/rovers.context\";\r\nimport Typography from \"../typography\";\r\nimport * as S from \"./styles\";\r\ninterface RoverItemProps {\r\n  position: number;\r\n  rover: Rover;\r\n}\r\n\r\nconst RoverItem = ({\r\n  rover: {\r\n    current: { y, x },\r\n    lookDirection,\r\n    commands,\r\n    status,\r\n  },\r\n  position,\r\n}: RoverItemProps) => {\r\n  return (\r\n    <S.StyledRoverItemContainer>\r\n      <S.StyledRoverPositionContainer>\r\n        <Typography type=\"h3\" text=\"Number\" />\r\n        <Typography type=\"h1\" text={position.toString()} />\r\n      </S.StyledRoverPositionContainer>\r\n      <S.StyledRoverPositionContainer>\r\n        <Typography type=\"h3\" text=\"Status\" />\r\n        <Typography type=\"h1\" text={status.toString()} />\r\n      </S.StyledRoverPositionContainer>\r\n      <S.StyledRoverPositionContainer>\r\n        <Typography type=\"h3\" text=\"Current position\" />\r\n        <Typography type=\"h1\" text={`(${x.toString()},${y.toString()})`} />\r\n      </S.StyledRoverPositionContainer>\r\n      <S.StyledRoverPositionContainer>\r\n        <Typography type=\"h3\" text=\"Look direction\" />\r\n        <Typography type=\"h1\" text={lookDirection} />\r\n      </S.StyledRoverPositionContainer>\r\n      <S.StyledRoverPositionContainer>\r\n        <Typography type=\"h3\" text=\"Commands\" />\r\n        <Typography type=\"h1\" text={commands.join(\"\")} />\r\n      </S.StyledRoverPositionContainer>\r\n    </S.StyledRoverItemContainer>\r\n  );\r\n};\r\n\r\nexport default RoverItem;\r\n","import React from \"react\";\r\nimport Button from \"../../components/button\";\r\nimport TextInput from \"../../components/TextInput\";\r\nimport useGrid from \"../../context/grid.context\";\r\nimport * as S from \"./styles\";\r\nimport * as GS from \"../../global-styles\";\r\nimport Typography from \"../../components/typography\";\r\nimport useRovers from \"../../context/rovers.context\";\r\nimport TextArea from \"../../components/TextArea\";\r\nimport RoverItem from \"../../components/roverItem\";\r\ninterface Props {}\r\n\r\nconst InputSection = (props: Props) => {\r\n  const { setX, setY, x, y, generateGrid } = useGrid();\r\n  const {\r\n    roverX,\r\n    roverY,\r\n    setRoverX,\r\n    setRoverY,\r\n    createRover,\r\n    lookDirection,\r\n    setLookDirection,\r\n    commands,\r\n    setCommands,\r\n    rovers,\r\n    sendAllRovers,\r\n  } = useRovers();\r\n\r\n  return (\r\n    <S.StyledInputSection>\r\n      <GS.StyledContainer>\r\n        <Typography text=\"Grid\" type=\"h3\" />\r\n        <S.StyledGridInputRow>\r\n          <TextInput label=\"X\" value={x} changeValue={setX} />\r\n          <TextInput label=\"Y\" value={y} changeValue={setY} />\r\n        </S.StyledGridInputRow>\r\n        <Button\r\n          disabled={y === \"0\" || x === \"0\"}\r\n          label=\"Generate Grid\"\r\n          onClick={generateGrid}\r\n        />\r\n      </GS.StyledContainer>\r\n      <GS.StyledContainer>\r\n        <Typography text=\"Rover\" type=\"h3\" />\r\n        <S.StyledGridInputRow>\r\n          <GS.StyledContainer>\r\n            <S.StyledGridInputRow>\r\n              <TextInput label=\"X\" value={roverX} changeValue={setRoverX} />\r\n              <TextInput label=\"Y\" value={roverY} changeValue={setRoverY} />\r\n            </S.StyledGridInputRow>\r\n            <S.StyledGridInputRow>\r\n              <TextInput\r\n                label=\"Look Direction\"\r\n                value={lookDirection}\r\n                changeValue={setLookDirection}\r\n              />\r\n            </S.StyledGridInputRow>\r\n          </GS.StyledContainer>\r\n          <GS.StyledContainer>\r\n            <S.StyledGridInputRow>\r\n              <Typography text=\"L: Left\" type=\"p\" />\r\n              <Typography text=\"R: Right\" type=\"p\" />\r\n              <Typography text=\"M: Move\" type=\"p\" />\r\n            </S.StyledGridInputRow>\r\n            <TextArea\r\n              label=\"Commands\"\r\n              value={commands}\r\n              changeValue={setCommands}\r\n            />\r\n          </GS.StyledContainer>\r\n        </S.StyledGridInputRow>\r\n        <Button\r\n          disabled={\r\n            parseInt(roverX) > parseInt(x) || parseInt(roverY) > parseInt(y)\r\n          }\r\n          label=\"Create Rover\"\r\n          onClick={createRover}\r\n        />\r\n      </GS.StyledContainer>\r\n      <GS.StyledContainer>\r\n        <S.StyledGridInputRow>\r\n          <Typography type=\"h3\" text=\"Rover list\" />\r\n          <Button\r\n            disabled={!rovers.length}\r\n            label=\"Send All Rovers\"\r\n            onClick={sendAllRovers}\r\n          />\r\n        </S.StyledGridInputRow>\r\n        {rovers.map((rover, index) => (\r\n          <RoverItem key={index} position={index} rover={rover} />\r\n        ))}\r\n      </GS.StyledContainer>\r\n    </S.StyledInputSection>\r\n  );\r\n};\r\n\r\nexport default InputSection;\r\n","import React from \"react\";\r\nimport * as GS from \"./global-styles\";\r\nimport Providers from \"./providers\";\r\nimport GridSection from \"./sections/GridSection\";\r\nimport InputSection from \"./sections/InputSection\";\r\nfunction App() {\r\n  return (\r\n    <GS.App>\r\n      <Providers>\r\n        <InputSection />\r\n        <GS.StyledFlexContainer>\r\n          <GridSection />\r\n        </GS.StyledFlexContainer>\r\n      </Providers>\r\n    </GS.App>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}